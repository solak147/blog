@page "/gorouter"
@inherits Blog.Base.Base

<h1 style="display: none;"> @h1Title - go gin router</h1>

<h3><b>淺談 Restful API</b></h3>
<p>
    RESTful API是一種基於REST（Representational State Transfer）架構風格的API設計方式，它通過標準的HTTP協議中的GET、POST、PUT、DELETE等動詞方法來實現對Web資源的操作。<br /><br />

    RESTful API通過URL定位資源，使用HTTP動詞定義操作，並使用HTTP狀態碼表示操作結果。在RESTful API中，資源的表示形式通常是JSON或XML格式，而且RESTful API的資源通常是無狀態的，每個請求都應該包含足夠的資訊來完成操作，不需要在伺服器端保存狀態資訊。<br /><br />

    相比於傳統的API設計方式，RESTful API更加符合Web的設計原則，它具有較好的可擴展性、可維護性和互操作性。由於RESTful API通過標準的HTTP協議進行通信，所以它具有良好的跨平台性，可以支持多種編程語言和開發環境。因此，RESTful API已經成為Web API設計的主流方式之一。<br /><br />
</p>

<h3><b>Gin Router</b></h3>
<p>
    Gin 的路由模塊提供了許多方便的功能，例如：<br /><br />

    1.支持 HTTP 請求方法（GET、POST、PUT、DELETE 等）和參數的路由映射，可以根據請求 URL、查詢字符串、請求體等不同部分的內容進行匹配。<br /><br />

    2.支持路徑參數，例如 /users/:id 這樣的路徑可以匹配 /users/1、/users/2 等任何以 /users/ 開頭並且後面跟著一個整數的路徑。<br /><br />

    3.支持多個處理程序函數的鏈式處理，即將多個處理程序函數按照一定的順序組合在一起，形成一個處理鏈。每個處理程序函數都可以訪問上一個函數處理後的結果，從而實現一系列有序的操作。<br /><br />

    4.支持路由組，即將具有相同前綴的路由進行分組管理，可以在組級別上添加中間件或共享上下文等信息，以實現更高級別的功能。
</p>
<pre><code class="go">
    func main() {
        // Creates a gin router with default middleware:
        // logger and recovery (crash-free) middleware
        router := gin.Default()

        router.GET("/someGet", getting)
        router.POST("/somePost", posting)
        router.PUT("/somePut", putting)
        router.DELETE("/someDelete", deleting)
        router.PATCH("/somePatch", patching)
        router.HEAD("/someHead", head)
        router.OPTIONS("/someOptions", options)

        // By default it serves on :8080 unless a PORT environment variable was defined.
        router.Run()
        // router.Run(":3000") for a hard coded port
    }
</code></pre>
<p>
    gin.Default()：使用 gin router 預設的 middleware，包含 logger 和 recover (crash-free) 的 middleware<br />
    router.Run()：預設是 :8080 ，可以用字串修改，例如 router.Run(":3000")
</p>


<h3><b>Parameters in Path</b></h3>
<p>
    取得網址中的 params：<br /><br />

    在路由設定中<br />
    &emsp;使用 :&ltfiled>
    可以定義動態路由（只能匹配到 / 以前）<br />
    &emsp;使用 *&ltfiled>
    可以定義動態路由（可以匹配到 / 以後）<br />
    c.Param("&ltfield>
    ") 可以取得網址中的參數<br />
    c.Fullpath() 可以取得定義的路由參數
</p>

<p>
    Gin 的路由使用 gin.Context 對象來處理請求，可以通過 router.Handle 方法定義不同的路由。以下是一個簡單的示例，演示如何使用 Gin 定義一個路由：
</p>
<pre><code class="go">
    func main() {
        router := gin.Default()

        router.GET("/user", func(c *gin.Context) {
            c.String(200, "/user")
        })

        // 不會匹配到 /user/ 或 /user
        router.GET("/user/:name", func(c *gin.Context) {
            fmt.Println(c.FullPath())  // /user/:name/
            name := c.Param("name")
            c.String(http.StatusOK, "Hello %s", name)
        })

        // 然而，這將會匹配到 /user/john/ 和 /user/john/send
        // If no other routers match /user/john, it will redirect to /user/john/
        router.GET("/user/:name/*action", func(c *gin.Context) {
            fmt.Println(c.FullPath())   // /user/:name/*action
            name := c.Param("name")
            action := c.Param("action")
            message := name + " is " + action
            c.String(http.StatusOK, message)
        })

        router.Run(":3000")
    }
</code></pre>
<br />

<h3><b>建立 HTTPS / SSL 的 路由</b></h3>
<p>
    要使用 Gin 框架在HTTPS / SSL模式下建立路由，您需要進行以下步驟：<br /><br />

    1.生成 SSL 證書和密鑰<br />
    您需要在服務器上生成SSL證書和密鑰。您可以使用自己的證書頒發機構（CA）簽署證書，或使用免費的證書頒發機構（例如Let's Encrypt）獲得證書。<br /><br />

    2.配置 Gin 的HTTP服務器<br />
    您需要使用 Gin 的 gin.Default() 函數初始化 HTTP 服務器，並將其配置為使用 TLS。<br /><br />

    以下是一個簡單的示例：<br />
</p>
<pre><code class="go">
    import "github.com/gin-gonic/gin"
    import "net/http"
    import "crypto/tls"

    func main() {
        router := gin.Default()

        // 讀取證書和密鑰文件
        certFile := "/path/to/cert.pem"
        keyFile := "/path/to/key.pem"

        // 使用TLS配置服務器
        server := &http.Server{
            Addr: ":443",
            Handler: router,
            TLSConfig: &tls.Config{
                Certificates: []tls.Certificate{},
            },
        }

        // 啟動服務器
        server.ListenAndServeTLS(certFile, keyFile)
    }
</code></pre>

<div class="ref">
    參考 :<a href="https://ithelp.ithome.com.tw/articles/10275175">https://ithelp.ithome.com.tw/articles/10275175</a><br />
    <a href="https://pjchender.dev/golang/gin-routes/">https://pjchender.dev/golang/gin-routes/</a>
</div>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        seo.pageTitle = "Go Gin Router 介紹";
        seo.metaTitle = "Go Gin Router 介紹";
        seo.metaDescription = @"Gin 的路由模块提供了许多方便的功能，例如：

            支持 HTTP 请求方法（GET、POST、PUT、DELETE 等）和参数的路由映射，可以根据请求 URL、查询字符串、请求体等不同部分的内容进行匹配。

            支持路径参数，例如 /users/:id 这样的路径可以匹配 /users/1、/users/2 等任何以 /users/ 开头并且后面跟着一个整数的路径。

            支持多个处理程序函数的链式处理，即将多个处理程序函数按照一定的顺序组合在一起，形成一个处理链。每个处理程序函数都可以访问上一个函数处理后的结果，从而实现一系列有序的操作。

            支持路由组，即将具有相同前缀的路由进行分组管理，可以在组级别上添加中间件或共享上下文等信息，以实现更高级别的功能。";

        await base.SetParametersAsync(ParameterView.Empty);
    }
}