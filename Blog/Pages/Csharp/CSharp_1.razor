@page "/csharp1"
@inherits Blog.Base.Base

<h1 style="display: none;"> @h1Title - C# 中的 override 和 new 關鍵字有什麼區別</h1>

<h2><b>C# 中的 override 和 new 關鍵字有什麼區別</b></h2>

<p>
    在 C# 中，override 和 new 都是用於實現方法重寫（method overriding）的關鍵字。但是，它們之間有著一些重要的區別，具體如下：<br /><br />

    1.語義區別：override 關鍵字表示子類的方法會覆蓋（重寫）父類中同名方法的實現，而 new 關鍵字表示子類的方法是一個全新的方法，並不會覆蓋父類中同名方法的實現。<br />

    2.虛擬方法的要求：如果要使用 override 關鍵字，必須先聲明父類方法為虛擬（virtual）方法；而使用 new 關鍵字不需要，因為 new 方法不是對父類方法的重寫，而是定義一個新的方法。<br />

    3.多態行為：如果子類使用 override 關鍵字重寫父類方法，那麼父類的引用指向子類實例時，將會調用子類中的方法；而如果子類使用 new 關鍵字定義一個新方法，那麼父類的引用指向子類實例時，將會調用父類中的方法。<br /><br />

    總的來說，override 和 new 關鍵字都可以用於實現方法重寫，但其語義和多態行為等方面有所區別。在使用時，開發者需要根據具體情況選擇合適的方式。<br />
</p>

<pre><code class="CSharp">
    class A {
        public void CallHello()
        {
            Hello();
        }

        public virtual int Hello() {
            return 1;
        }
    }

    class B : A {
        new public int Hello() {
            return 2;
        }
    }

    class C : A {
        public override int Hello() {
            return 3;
        }
    }
</code></pre>

<pre><code class="CSharp">
    A objectA;
    B objectB = new B();
    C objectC = new C();

    Console.WriteLine(objectB.Hello()); // 2
    Console.WriteLine(objectB.CallHello()); // 1  會執行class A的Hello
    Console.WriteLine(objectC.Hello()); // 3

    objectA = objectB;

    Console.WriteLine(objectA.Hello()); // 1

    objectA = objectC;

    Console.WriteLine(objectA.Hello()); // 3
</code></pre>

<h3><b>多型</b></h3>
<p>
    上述範例: <br />
    1.objectA = objectB，new 因為是隱藏父類別方法的關係，會執行變數型別的方法 <br />
    2.objectA = objectC，override 則是執行覆寫類別的方法 <br />
</p>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        seo.pageTitle = "C# 中的 override 和 new 關鍵字有什麼區別";
        seo.metaTitle = "C# 中的 override 和 new 關鍵字有什麼區別";
        seo.metaDescription = @"C# 中的 override 和 new 關鍵字有什麼區別，new 因為是隱藏父類別方法的關係，會執行變數型別的方法
            override 則是執行覆寫類別的方法";

        await base.SetParametersAsync(ParameterView.Empty);
    }
}
