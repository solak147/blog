@page "/csharp2"
@inherits Blog.Base.Base

<h1 style="display: none;"> @h1Title - ASP.NET Core Web API 訊息處理器</h1>

<h2><b>ASP.NET Core Web API 訊息處理器</b></h2>

<p>
    在 ASP.NET Web API 中，訊息處理器（Message Handlers）是一種強大的擴展機制，它可以攔截、修改和發送 Web API 中所有的 HTTP 請求和回應訊息，並且能夠在全域範圍和特定路由範圍內共享。<br />

    ASP.NET Web API 的訊息處理器通常包含在 HTTP 請求管道（HTTP Request Pipeline）中，可以攔截在網頁伺服器和 Web API 應用程式之間傳輸的所有 HTTP 請求和回應訊息。訊息處理器可以執行一系列的任務，例如驗證請求，壓縮回應，修改標頭資訊，傳遞訊息給下一個處理器等等。<br /><br />

    ASP.NET Web API 的訊息處理器主要有兩種：<br />

    1.全域訊息處理器：這種訊息處理器會攔截所有的 HTTP 請求和回應訊息。全域訊息處理器可以被註冊在全域範圍內，例如在 Web API 的啟動類別（Startup class）中註冊。<br />

    2.路由範圍訊息處理器：這種訊息處理器只會攔截特定路由下的 HTTP 請求和回應訊息。路由範圍訊息處理器可以在路由的設定中設定。<br /><br />

    在訊息處理器中，可以使用訊息物件（HttpMessage）和訊息處理器執行個體（HttpMessageHandler）來處理和修改訊息。訊息物件代表一個 HTTP 請求或回應訊息，包含相關的標頭、內容等訊息。訊息處理器執行個體則是用於對訊息進行處理和修改。<br />

    使用訊息處理器可以方便地對 Web API 的請求和回應進行全域或特定路由範圍的攔截和修改，可以提高 Web API 的可擴展性和靈活性。<br />

    下圖描繪了 ASP.NET Web API 的「請求－回應」：<br />
</p>

<img src="images/csharp_1.png" alt="ASP.NET Web API 訊息處理器" class="imgfmt" style="width:50%">

<p>
    圖中的 HttpServer 類別隸屬 System.Web.Http 命名空間，其父類別是 DelegatingHandler，祖父則是抽象類別 HttpMessageHandler。
    也就是說，HttpSever 本身就是個訊息處理器。根據 MSDN 網站的說明，其責任是分派 HttpRequestMessage，以及建立 HttpResponseMessage。
</p>
<br />

<h3><b>DelegatingHandler</b></h3>
<p>
    DelegatingHandler 的用途是處理 HttpRequestMessage 和 HttpResponseMessage 物件，並將處理過的物件交給下一棒繼續處理（於是形成了所謂的管線機制）。
    當然，在處理的時候，也可以不要傳遞給下一個處理器，亦即停止後續的管線。<br /><br />

    DelegatingHandler 有個 InnerHandler 屬性，型別是 HttpMessageHandler（它就是 DelegatingHandler 的父類別）。
    這個 InnerHandler 會指向下一條管線──這裡稍微改個說法：InnerHandler 會指向下一層管線。
</p>

<h3><b>實作 DelegatingHandler</b></h3>
<pre><code class="CSharp">
    public class MyRequestHandler : DelegatingHandler
    {
        protected override async Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
        {
            // 在請求處理之前執行一些操作
            // 例如：驗證請求、修改請求標頭等

            var response = await base.SendAsync(request, cancellationToken);

            // 在回應處理之後執行一些操作
            // 例如：修改回應標頭、壓縮回應內容等
            switch (response.StatusCode)
            {
            case HttpStatusCode.Unauthorized:
                break;
            case (HttpStatusCode)440:
                break;
            case HttpStatusCode.Forbidden:
                break;
            case HttpStatusCode.ServiceUnavailable:
                break;
            }
        }
    }
</code></pre>

<h3><b>在 Program.cs 註冊訊息處理器</b></h3>
<pre><code class="CSharp">
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.DependencyInjection;

    var builder = WebApplication.CreateBuilder(args);

    // 設定訊息處理器
    builder.Services.AddTransient&lt;MyRequestHandler&gt;();
    builder.Services.AddHttpClient("MyHttpClient")
        .AddHttpMessageHandler&lt;MyRequestHandler&gt;();

    // 其他服務設定
    // ...

    var app = builder.Build();

    // 其他應用程式設定
    // ...

    // 設定訊息處理器
    app.UseHttpMessageHandlerMiddleware&lt;MyRequestHandler&gt;();

    app.Run();
</code></pre>

<div class="ref">
    參考 :<a href="https://www.huanlintalk.com/2013/01/aspnet-web-api-message-handlers.html">https://www.huanlintalk.com/2013/01/aspnet-web-api-message-handlers.html</a>
</div>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        seo.pageTitle = "ASP.NET Core Web API 訊息處理器";
        seo.metaTitle = "ASP.NET Core Web API 訊息處理器";
        seo.metaDescription = @"DelegatingHandler 的用途是處理 HttpRequestMessage 和 HttpResponseMessage 物件，並將處理過的物件交給下一棒繼續處理";

        await base.SetParametersAsync(ParameterView.Empty);
    }
}
@*
    參考
    https://www.huanlintalk.com/2013/01/aspnet-web-api-message-handlers.html
*@