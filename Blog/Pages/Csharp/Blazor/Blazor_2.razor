@page "/blazor2"
@inherits Blog.Base.Base

<h1 style="display: none;"> @h1Title - Blazor Service Lifetime</h1>

<h2><b>Service Lifetime</b></h2>
<br />

<p>
    自己建立的 Service 都必須在 Program.cs 注冊，而在 Blazor 也有幫你建立好一些基本的 Service <br /><br />

    目前 Blazor 提供内建的 Service 有三个，分别為：<br /><br />

    1.<span class="imtdot">HttpClient：</span>負責處理 http 請求，生命周期为 Scoped (注意：只有 Blazor WebAssembly 有提供，Blazor Server 必須自己注冊) <br />
    2.<span class="imtdot">IJSRuntime：</span>提供 Javascript runtime 组件處理 JS 功能，Blazor WebAssembly 生命周期為 Singleton，Blazor Server 生命周期為 Scoped <br />
    3.<span class="imtdot">NavigationManager：</span>處理路由導向和狀態，Blazor WebAssembly 生命周期為 Singleton，Blazor Server 生命周期為 Scoped <br /><br />

    生命周期指的就是 Component 存活的時間，有<span class="imtdot">Singleton、Scoped、Transient</span>三種。<br /><br />

    在 Blazor 中，服務的生命週期決定了它在應用程序運行期間的生命週期和行為。<br />

    <span class="imtdot">Singleton：單例模式</span>，即服務在應用程序運行期間只創建一次，每次注入時返回同一個實例。Singleton 服務的生命週期與應用程序相同，只有當應用程序關閉時，才會銷毀 Singleton 服務。Singleton 服務通常用於保存應用程序狀態、管理資源、提供全局訪問權限等場景。<br /><br />

    <span class="imtdot">Scoped：作用域模式</span>，即服務在每個作用域內只創建一次，每次注入時返回同一個實例。在 Blazor 中，每個 Razor 組件都會創建一個作用域。Scoped 服務的生命週期與當前 Razor 組件的生命週期相同，即當 Razor 組件銷毀時，相應的 Scoped 服務也會被銷毀。Scoped 服務通常用於保持狀態，以便在 Razor 組件之間共享信息。<br /><br />

    <span class="imtdot">Transient：瞬時模式</span>，即每次注入都創建一個新的實例。Transient 服務的生命週期很短，只在當前方法或作用域中存在。當方法調用結束或作用域銷毀時，相應的 Transient 服務也會被銷毀。Transient 服務通常用於提供輔助方法或瞬時操作。<br /><br />

    在 Blazor WebAssembly 應用程序中，需要在 Program.cs 文件中設置 DI 容器，然後在整個應用程序中注入服務。<br />

    以下是如何設置 DI 容器並注入 Scoped 服務 IMyScopedService 的示例：
</p>

<pre><code class="csharp">
    using Microsoft.Extensions.DependencyInjection;
    using System;

    public class Program
    {
        public static async Task Main(string[] args)
        {
            var builder = WebAssemblyHostBuilder.CreateDefault(args);
            builder.RootComponents.Add&ltApp>("app");

            // 註冊服務
            builder.Services.AddScoped&ltIMyScopedService, MyScopedService>();

            var host = builder.Build();

            await host.RunAsync();
        }
    }
</code></pre>

<p>
    在上面的代碼中，我們使用 builder.Services.AddScoped&ltIMyScopedService, MyScopedService>() 方法註冊一個 Scoped 服務 MyScopedService，並指定其接口為 IMyScopedService。這將使該服務在每個 Razor 組件的作用域中只創建一次，並在每個注入時返回同一個實例。<br />

    在 Blazor 中，使用 @@inject 屬性來注入服務，例如：
</p>

<pre><code class="csharp">
    @@inject IMyScopedService MyScopedService
</code></pre>

<p>
    Blazor 會自動創建一個 IMyScopedService 的實例並注入到組件中，該實例會在當前 Razor 組件的生命週期內一直存在，直到該 Razor 組件銷毀。<br />

    需要注意的是，服務生命週期的選擇應該根據具體的業務場景和需求來決定，以確保服務在運行期間能夠正確地工作。<br />
</p>

<p>
    Scoped 較為特别，Blazor Server 跟 Blazor WebAssembly 模式不相同，Blazor Server 的 Scoped 是指每次 http 請求都會產生一个新的實例，<br />
    但 Component 之間通過 SingalR 傳遞不會產生。<br /><br />

    微軟文檔说明「Blazor WebAssembly 目前没有DI的概念，Scoped 相當於 Singleton <br />
    Blazor WebAssembly 沒有 Server 端，每次重新加載網頁都會將程序下載到瀏覽器，這是一个全新的 http 請求，所以 Singleton 跟 Scoped 都是只要一重新加載網頁就會產生新的實例。
</p>

<p>
    參考 :<a href="https://ithelp.ithome.com.tw/m/articles/10261219">https://ithelp.ithome.com.tw/m/articles/10261219</a>
</p>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        seo.pageTitle = "Blazor Service Lifetime";
        seo.metaTitle = "Blazor Service Lifetime";
        seo.metaDescription = @"Blazor Service Lifetime : Blazor 內建提供的 Services 及 Component 存活時間，分別為Singleton、Scoped、Transient";

        await base.SetParametersAsync(ParameterView.Empty);
    }
}