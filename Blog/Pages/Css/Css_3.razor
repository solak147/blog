@page "/css3"
@inherits Blog.Base.Base

<h1 style="display: none;"> @h1Title - display : flex</h1>

<h2><b>display : flex</b></h2>
<br />
<p>
    CSS 的 display 屬性用於定義元素的外觀和行為，其中 display: flex 是用於定義彈性容器 (flex container) 的屬性。將 display 屬性設置為 flex 可以啟用 CSS Flexbox 佈局，該佈局可以將元素排列為一行或一列，自動調整元素的寬度和高度，以實現自適應和響應式設計。<br />

    使用 display: flex 會將元素設置為彈性容器，其中包含一個或多個彈性項目 (flex item)，這些項目按照輸入的順序自動排列。每個彈性項目可以具有不同的寬度、高度、對齊方式、排序方式等屬性，以實現更靈活的佈局效果。<br />

    以下是一個簡單的使用 display: flex 屬性的示例：<br />
</p>
<pre><code class="html">
    # html
    &ltdiv class="container">
    &ltdiv class="item">Item 1&lt/div>
    &ltdiv class="item">Item 2&lt/div>
    &ltdiv class="item">Item 3&lt/div>
    &lt/div>
</code></pre>

<pre><code class="css">
    # css
   .container {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
    }

    .item {
      width: 100px;
      height: 100px;
      background-color: gray;
      margin: 10px;
    }
</code></pre>
<p>
    在這個示例中，將 .container 元素設置為彈性容器，其內部包含三個 .item 彈性項目。設置 flex-direction 屬性為 row，表示將這些項目水平排列。設置 justify-content 屬性為 space-between，表示將項目之間的空間均勻地分配在它們之間。<br />

    在 .item 元素中，設置了固定的寬度、高度和背景顏色。使用 display: flex 屬性後，.item 元素會自動調整其寬度和高度以填充容器中的空間，從而實現更靈活的佈局效果。<br />

    總之，使用 display: flex 屬性可以實現更靈活、自適應和響應式的佈局效果，並可以通過組合其他 Flexbox 屬性來實現更多的設計需求。<br /><br />
</p>

<h3><b>Flex 主軸與交錯軸</b></h3>
<p>
    在 CSS 的 Flexbox 佈局中，彈性容器的軸分為主軸 (main axis) 和交錯軸 (cross axis)，它們分別用於定位和對齊彈性項目。<br /><br />

    主軸是彈性容器的主要方向，通常是水平的 (row) 或垂直的 (column)，決定了彈性項目的排列方向和對齊方式。在使用 display: flex 屬性的元素上，主軸的方向可以通過 flex-direction 屬性進行設置。<br /><br />

    如果設置為 row，則主軸是水平方向，彈性項目從左到右排列。<br />
    如果設置為 row-reverse，則主軸是水平方向，彈性項目從右到左排列。<br />
    如果設置為 column，則主軸是垂直方向，彈性項目從上到下排列。<br />
    如果設置為 column-reverse，則主軸是垂直方向，彈性項目從下到上排列。<br />
    交錯軸與主軸垂直，用於對齊和調整彈性項目在主軸上的尺寸。在使用 display: flex 屬性的元素上，交錯軸的方向可以通過 justify-content 屬性進行設置。<br /><br />

    如果設置為 flex-start，則交錯軸的起點對齊彈性項目。<br />
    如果設置為 flex-end，則交錯軸的終點對齊彈性項目。<br />
    如果設置為 center，則彈性項目在交錯軸上居中對齊。<br />
    如果設置為 space-between，則彈性項目之間均勻地分配交錯軸上的空間。<br />
    如果設置為 space-around，則彈性項目周圍均勻地分配交錯軸上的空間。<br /><br />
</p>

<h3><b>Flex 中分為外容器與內元件</b></h3>
<p>
    Flex 外容器屬性：<br />
    ● display<br />
    ● flex-flow<br />
    &nbsp;&nbsp;&nbsp;● flex-direction<br />
    &nbsp;&nbsp;&nbsp;● flex-wrap<br />
    ● justify-content<br />
    ● align-items<br /><br />

    Flex 內元件屬性：<br />
    ● flex<br />
    &nbsp;&nbsp;&nbsp;● flex-grow<br />
    &nbsp;&nbsp;&nbsp;● flex-shrink<br />
    &nbsp;&nbsp;&nbsp;● flex-basis<br />
    ● order<br />
    ● align-self<br />
</p>

<h3><b>外容器</b></h3>
<p>先設定 display: flex | inline-flex 才可使用下述大部分屬性</p>

<p>
    <b>flex-direction</b><br />
    決定內元件排序方向的重要屬性<br />
    flex-direction: row | row-reverse | column | column-reverse;
</p>
<img src="images/css_1.png" alt="gcpvm_11" class="imgfmt" style="width:50%;">

<p>
    <b>flex-wrap</b><br />
    超出範圍時是否換行的屬性，分為換行、不換行、換行時反轉。<br />
    flex-wrap: nowrap | wrap | wrap-reverse;
</p>
<img src="images/css_2.png" alt="gcpvm_11" class="imgfmt" style="width:50%;">

<p>
    flex-direction & flex-wrap 的縮寫<br />
    flex-flow: &lt; 'flex-direction'> || &lt;'flex-wrap'>
</p>

<p>
    <b>justify-content</b>: flex-start | flex-end | center | space-between | space-around;
</p>
<img src="images/css_3.png" alt="gcpvm_11" class="imgfmt" style="width:50%;">

<p>
    <b>align-items</b>: flex-start | flex-end | center | baseline | stretch;<br />
    多行版本 :<br />
    <b>align-content</b>: flex-start | flex-end | center | space-between | space-around | stretch;
</p>
<img src="images/css_4.png" alt="gcpvm_11" class="imgfmt" style="width:50%;">

<h3><b>內元件</b></h3>
<p>
    <b>flex</b><br />
    flex 是縮寫，裡面依序包含三個屬性 flex-grow、flex-shrink 和 flex-basis，如果只設定一個則是 flex-grow。<br />

    flex-grow: 元件的伸展性，是一個數值，當空間分配還有剩餘時的當前元件的伸展性，預設值為 0，如果設置為 0 則不會縮放。<br />
    flex-shrink: 元件的收縮性: 元件的伸展性，是一個數值，當空間分配還不足時的當前元件的收縮性，預設值為 1，如果設置為 0 則不會縮放。<br />
    flex-basis: 元件的基準值。
</p>

<p>
    <b>align-self</b><br />
    align-self 可以調整內元件交錯軸的對齊設定，且可以個別設定單一元件的值。
</p>
<img src="images/css_5.png" alt="gcpvm_11" class="imgfmt" style="width:50%;">

<p>
    <b>Order</b><br />
    可以重新定義元件的排列順序，順序會依據數值的大小排列。
</p>

<p>
    參考 :<a href="https://www.casper.tw/css/2017/07/21/css-flex/">https://www.casper.tw/css/2017/07/21/css-flex/</a>
</p>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        seo.pageTitle = "CSS - display : flex";
        seo.metaTitle = "CSS - display : flex";
        seo.metaDescription = @"CSS display : flex - 現代網頁排版神器 - 外部屬性 : display flex-flow justify-content align-items 內部屬性 : flex order align-self";

        await base.SetParametersAsync(ParameterView.Empty);
    }
}

@*https://www.casper.tw/css/2017/07/21/css-flex/*@