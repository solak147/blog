@page "/vuecomponentstr"
@inherits Blog.Base.Base

<h1 style="display: none;"> @h1Title - Vue 字串中使用 Component</h1>

<h2><b>字串中使用 Component</b></h2>
<br />

<p>
    如果您有一個包含自定義組件的字符串，並且希望將其轉換為HTML，您需要使用Vue.js的編譯器來處理這個字符串。Vue.js提供了一個編譯器函數Vue.compile，它可以將包含Vue組件的字符串編譯成渲染函數，然後將其呈現為HTML。以下是一個簡單的示例：
    <br /> <br />
    方式一 : 首先，確保您已經包含了Vue.js的庫。然後，您可以使用Vue.compile函數來編譯包含自定義組件的字符串，並將其呈現為HTML。
</p>

<pre><code class="javascript">
    // 导入Vue.js库
    import Vue from 'vue';

    // 包含自定义组件的字符串
    const customComponentString = '&lt;custom-component>/&lt;custom-component>';

    // 创建一个Vue实例来处理编译
    const vm = new Vue();

    // 使用Vu e.compile将字符串编译为渲染函数
    const compiledFunction = Vue.compile(customComponentString);

    // 调用渲染函数并将其插入到HTML元素中
    const renderedHTML = compiledFunction.render.call(vm);
    document.getElementById('app').innerHTML = renderedHTML;
</code></pre>

<p>
    方式二 : 使用v-html指令來呈現從字符串編譯得到的HTML。
</p>

<pre><code class="javascript">
    &lt;template>
      &lt;div>
        <!-- 使用v-html指令呈现编译后的HTML -->
        &lt;div v-html="compiledHTML">/&lt;div>
      /&lt;div>
    /&lt;template>

    &lt;script>
    export default {
      computed: {
        compiledHTML() {
          // 包含自定义组件的字符串
          const customComponentString = '&lt;my-custom-component>/&lt;my-custom-component>';
      
          // 返回编译后的HTML字符串
          return customComponentString;
        },
      },
    };
    /&lt;script>
</code></pre>

<p>
    方式三 : 另外提供另一種方式，用解析字符串中的組件標簽並建立 html element 在 Vue 模板中渲染：
</p>

<pre><code class="javascript">
&lt;template>
  &lt;div>
    &lt;!-- 使用动态组件容器 -->
    &lt;component :is="dynamicComponent">&lt;/component>
    &lt;button @@click="loadCustomComponent">Load Custom Component&lt;/button>
  &lt;/div>
&lt;/template>

&lt;script>
import CustomComponent from '~/components/CustomComponent.vue';

export default {
  components: {
    CustomComponent,
  },
  data() {
    return {
      dynamicComponent: null,
      // 包含自定义组件标签的字符串
      stringWithComponent: '&lt;custom-component>&lt;/custom-component>',
    };
  },
  methods: {
    loadCustomComponent() {
      // 解析字符串中的组件标签并动态加载
      this.dynamicComponent = this.renderComponentFromString(this.stringWithComponent);
    },
    // 帮助函数：将包含组件标签的字符串解析为动态组件
    renderComponentFromString(content) {
      const wrapper = document.createElement('div');
      wrapper.innerHTML = content;

      // 查找并处理所有的组件标签
      const componentTags = wrapper.querySelectorAll('custom-component');
      componentTags.forEach((tag) => {
        // 创建组件实例并挂载
        const componentInstance = new CustomComponent();
        componentInstance.$mount();
        // 替换标签为组件实例的 DOM 元素
        tag.parentNode.replaceChild(componentInstance.$el, tag);
      });

      return wrapper.innerHTML;
    },
  },
};
&lt;/script>

</code></pre>

<p>
    在這個示例中，我們首先在模板中使用一個動態組件 (&lt;component>)，並且將 dynamicComponent 綁定到動態組件的 :is 屬性上。當點擊按鈕時，loadCustomComponent 方法會調用 renderComponentFromString 幫助函數，該函數會解析字符串中的組件標簽，並動態加載自定義組件。
        <br /><br />
    這個示例允許在字符串中插入自定義組件標簽，並在點擊按鈕後在客戶端渲染這些組件。這樣可以繞過服務器端渲染（SSR）的限制，但需要注意在實際應用中，需要考慮一些細節，例如處理組件的生命周期、事件綁定等。
</p>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        seo.pageTitle = "Vue 字串中使用自定義 Component";
        seo.metaTitle = "Vue 字串中使用自定義 Component";
        seo.metaDescription = @"如果必須在字符串中插入自定義組件，可以考慮使用 Vue 的動態組件 (&lt;component>) 和 Vue 的$mount() 方法來實現。
            或是利用解析字符串中的組件標簽並建立 html element 在 Vue 模板中渲染";

        await base.SetParametersAsync(ParameterView.Empty);
    }
}

