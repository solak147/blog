@page "/javascript1"
@inherits Blog.Base.Base

<h1 style="display: none;"> @h1Title - Promise</h1>

<h2><b>Promise 簡介</b></h2>
<br />

<p>
    Promise 是 一個 JavaScript 語法，專門用來優化非同步行為，它可以幫助你更容易地控制程式的流程和避免 callback hell，而 Async、Await 可以基於 Promise 讓非同步的語法的結構類似於 “同步語言”。
</p>

<h3><b>非同步的問題</b></h3>
<p>
    Promise 本身是用來改善 JavaScript 非同步的語法結構。<br />
    JavaScript 是屬於同步的程式語言，因此一次僅能做一件事情，但遇到非同步的事件時，<br />
    就會將非同步的事件移動到程式碼的最後方，等到所有的原始碼運行完以後才會執行非同步的事件。<br />
    以下列的程式碼來說，在 console 中依序的會出現的順序為：<br /><br />

    開始 -> 程式碼結束 -> 非同步事件
</p>
<pre><code class="JAVASCRIPT">
    console.log('開始');

    setTimeout(() => {
        console.log('非同步事件');
    }, 0);

    console.log('程式碼結束');
</code></pre>
<br />

<h3><b>Promise 的結構及狀態</b></h3>
<p>
    Promise 建構函式 new 出的物件，則可以使用其中的原型方法（在 prototype 內），其中就包含 then、catch、finally，這些方法則必須在新產生的物件下才能呼叫。

    透過 new Promise() 的方式建立 p 物件，此時 p 就能使用 Promise 的原型方法：
</p>
<pre><code class="JAVASCRIPT">
    const p = new Promise();

    p.then();    // Promise 回傳正確
    p.catch();   // Promise 回傳失敗
    p.finally(); // 非同步執行完畢（無論是否正確完成）
</code></pre>

<p>
    除此之外，Promise 建構函式建立同時，必須傳入一個函式作為參數（executor function），此函式的參數包含 resolve, reject，這兩個方法分別代表成功與失敗的回傳結果，
    特別注意這兩個僅能回傳其中之一，回傳後表示此 Promise 事件結束。
</p>
<pre><code class="JAVASCRIPT">
    new Promise(function(resolve, reject) { 
        resolve(); // 正確完成的回傳方法
        reject();  // 失敗的回傳方法
    });
</code></pre>

<p>
    Promise 的關鍵在處理非同步的事件，而非同步的過程中也包含著不同的進度狀態，在 Promise 的執行過程中，可以看到以下狀態。<br /><br />

    pending：事件已經運行中，尚未取得結果<br />
    resolved：事件已經執行完畢且成功操作，回傳 resolve 的結果（該承諾已經被實現 fulfilled）<br />
    rejected：事件已經執行完畢但操作失敗，回傳 rejected 的結果<br />
</p>
<img src="images/javascript_1.png" alt="Promise 流程圖" class="imgfmt">

<p>
    Promise 中會使用 resolve 或 reject 回傳結果，並在調用時使用 then 或 catch 取得值。<br />
    如果要判斷 Promise 是否完成，可依據 Promise 事件中的 resolve 及 reject 是否有被調用，如下Promise 的結果則會停留在 pending
</p>
<img src="images/javascript_2.png" alt="gcpvm_5" class="imgfmt" style="width:50%;">

<p>
    Promise 在 .then(onFulfilled, onRejected)中可帶入兩個回呼函式，兩者分別又可以帶入各自的參數：<br />

    ● onFulfilled：執行成功的函式，所帶入參數表示 Promise 函式中 resolve 所帶入的值。<br />
    ● onRejected：執行失敗的函式，帶入參數表示 Promise 函式中 reject 所帶入的值。<br />
</p>

<pre><code class="JAVASCRIPT">
    // promise.then(onFulfilled, onRejected);
    // 前者為 resolve callback，後者則為 reject
    promise()
        .then((success) => {
        console.log(success);
        }, (fail) => {
        console.log(fail);
    })

    // 也可寫成
    // promise.then(onFulfilled);
    // promise.catch(onRejected)
    promise()
        .then(success => {
        console.log(success);
        })
        // 失敗的行為一律交給了 catch
        .catch(fail => {
        console.log(fail);
        });
</code></pre>
<br />

<h3><b>鏈接</b></h3>
<p>
    為了確保非同步完成後才執行另一個方法，過去都只能不斷的透過 callback 的方式來確保下一個方法正確執行，形成酷似波動拳的結構，難以維護。<br />
    而 Promise 改善了這個狀況，使用 then、catch 都可以使用鏈接的方式不斷的進行下一個任務。<br /><br />

    當我們要進行確保 Promise 任務結束後在進行下一個任務時，就可以使用 return 的方式進入下一個 then，此 return 也有以下特點：<br />

    ● 方法不限於 promise 函式，任何表達式（expression）都可進行回傳<br />
    ● 如果是 promise 函式，則會繼續遵循 then 及 catch 的運作<br />
    ●  如果不是 promise 函式，在下一個 then 則可以取得結果<br />
</p>
<pre><code class="JAVASCRIPT">
    function promise(num) {
      return new Promise((resolve, reject) => {
        num ? resolve(`${num}, 成功`) : reject('失敗');
      });
    }

    promise(1)
    .then(success => {
        console.log(success);
        return promise(2);
    })
    .then(success => {
        console.log(success);
        return promise(0); // 這個階段會進入 catch
    })
    .then(success => {   // 由於上一個階段結果是 reject，所以此段不執行
        console.log(success);
        return promise(3);
    })
    .catch(fail => {
        console.log(fail);
    })
</code></pre>
<br />

<h3><b>鏈接</b></h3>
<p>
    Promise 很大一部份是用來處理 Ajax 行為，此段透過改寫的形式了解使用 Promise 及傳統的寫法有哪些差異。<br />

    傳統上，需透過 XMLHttpRequest 建構式來產生可進行遠端請求的物件，並且依序定義方法 (GET) 及狀態 (onload) 並送出請求 (send)，取得結果後的其它行為則需要撰寫在 onload 內，程式碼結構如下：
</p>
<pre><code class="JAVASCRIPT">
    var url = 'https://jsonplaceholder.typicode.com/todos/1';

    // 定義 Http request
    var req = new XMLHttpRequest();

    // 定義方法
    req.open('GET', url);

    // 當請求完成，則進行函式的結果
    req.onload = function() {
      if (req.status == 200) {
        // 成功直接列出結果
        console.log(req.response);
      } else {
        // 失敗的部分
      }
    };

    // 送出請求
    req.send();
</code></pre>
<p>
    接下來將以上的行為封裝至 get 函式內，此函式包含 Promise 及上述的 XMLHttpRequest 行為，運用時只要直接使用 get(url)...，<br />
    接下來的運用方式則是符合 Promise 的結構，重複運用的情況下程式碼可以大幅提高易讀性。
</p>
<pre><code class="JAVASCRIPT">
    function get(url) {
      return new Promise((resolve, reject)=> {
        // 定義 Http request
        var req = new XMLHttpRequest();
        req.open('GET', url);
        req.onload = function() {
          if (req.status == 200) {
            // 使用 resolve 回傳成功的結果，也可以在此直接轉換成 JSON 格式
            resolve(JSON.parse(req.response));
          } else {
            // 使用 reject 自訂失敗的結果
            reject(new Error(req))
          }
        };
        req.send();
      });
    }

    // 往後的 HTTP 直接就能透過 get 函式取得
    get('https://jsonplaceholder.typicode.com/todos/1')
      .then((res) => {
        console.log(res);
      })
      .catch((res) => {
        console.error(res)
      })
</code></pre>

<div class="ref">
    參考 :<a href="https://www.casper.tw/development/2020/02/16/all-new-promise/">https://www.casper.tw/development/2020/02/16/all-new-promise/</a>
</div>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        seo.pageTitle = "JavsScript Promise 簡介";
        seo.metaTitle = "JavsScript Promise 簡介";
        seo.metaDescription = @"JavaScript Promise 是一個用來處理非同步操作的技術，它可以幫助你更容易地控制程式的流程和避免 callback hell。

            Promise 是一個封裝非同步操作的對象，它可以有三種狀態：

            pending（進行中）：promise 開始時的狀態。
            fulfilled（已完成）：promise 成功完成時的狀態。
            rejected（已拒絕）：promise 操作失敗時的狀態。
            當一個 promise 被創建時，它是在 pending 狀態。當操作完成時，它可以被解析為 fulfilled 狀態或 rejected 狀態。當 promise 的狀態改變時，它會觸發對應的回調函數。

            使用 Promise，你可以更好地處理多個非同步操作的流程。例如，當你需要按順序執行一系列非同步操作時，可以使用 Promise 的 then() 方法來解決。";

        await base.SetParametersAsync(ParameterView.Empty);
    }
}
