@page "/dart2"
@inherits Blog.Base.Base

<h1 style="display: none;"> @h1Title - Dart 建構式</h1>

<h2><b>Dart 建構式</b></h2>
<p>Dart 是一個支援 OOP 的程式語言，其建構式也跟大部分物件導向程式大致相同 ex: java。</p>

<h3><b>Named constructors(命名建構式)</b></h3>
<p>
    一個類別只能有一個主建構式 Unnamed constructors，不像在Java 擁有多載(Overloading) 的特性，<br />
    是用引數來區分，但是Dart 用另一種方法來滿足這個要求，並且能更清楚表達程式，<br />
    增加易讀性，即使用 Named constructors(命名建構式)<br />
</p>
<pre><code class="DART">
    class Person {

        String name = "匿名";
        int age;

        //主建構式 Unnamed constructors
        //由於建構式引數賦值給物件屬性變數的情況太常見了，Dart提供了一個語法來簡化這個操作
        Person(this.name, this.age);

        //Named constructors
        Person.secretAge(this.name);

        //Named constructors
        Person.anonymous(this.age);
    }

    void main() {
        Person a = Person("Ryder",26); 
        print("a.name = ${a.name}, a.age = ${a.age}");  //印出 a.name = Ryder, a.age = 26

        Person b = Person.secretAge("Judy"); 
        print("b.name = ${b.name}, b.age = ${b.age}");  //印出 b.name = Judy, b.age = null

        Person c = Person.anonymous(65); 
        print("c.name = ${c.name}, c.age = ${c.age}");  //印出 c.name = 匿名, c.age = 65
    }
</code></pre>
<br />

<h3><b>Redirecting constructors(重定向建構式)</b></h3>
<p>
    有時候一個建構式會調動類別中的其他建構式，一個重定向建構式是沒有程式碼的，在建構式聲明後，使用冒號呼叫其他建構式
</p>
<pre><code class="DART">
    vclass Point {
        num x;
        num y;

        // 主建構式
        Point(this.x, this.y);

        // 呼叫主建構式
        Point.alongXAxis(num x) : this(x, 0);
    }
</code></pre>
<br />

<h3><b>Factory</b></h3>
<p>
    在 Dart class constructor 中有提供一個語法糖 factory，
    和一般constructor最直觀的差異就是 factory constructor 會回傳一個 instance ，
    而不是像一般的 constructor 只要傳入值或者對this操作來設定值且不用另外撰寫return相關的語法
    。也因為是直接回傳 instance 所以就無法在 factory constructor 內對 this 進行操作。
</p>

<pre><code class="DART">
    void main() {
        final kevin = Person('developer',name:'kevin',age:25,email:'kk@gamil.com');
        final mike = Person.developer(age:25,name:'mike',email:'mm@gamil.com');
        final chris = Person.factory('chris');

        print(kevin.email);
        print(kevin.name);
        print(kevin.age);

        kevin.hello();
        mike.hello();
        chris.hello();
    }
</code></pre>

<pre><code class="DART">
    class Person {
        final String name;
        final int age;
        final String email;
        String position;

        //方法一
        Person(this.position, {this.name,  this.age,  this.email});

        //方法二
        Person.developer({ this.name,  this.age,  this.email}) {
            this.position = 'developer';
        }

        //方法三
        factory Person.factory(String name) {
            return Person('developer', name: name, age: 25, email: 'factory@gamil.com');
        }

        void hello() {
            print('hello, i\'m $name. my position is $position');
        }
    }
</code></pre>

<pre><code>
    輸出:
        kk@gamil.com
        kevin
        25
        hello, i'm kevin. my position is developer
        hello, i'm mike. my position is developer
        hello, i'm chris. my position is developer
</code></pre>
<br />

<h3><b>factory 有什麼用途？</b></h3>
<p>
    大致上有三種 : <br/>
    1.希望不是每一次呼叫constructor都一定會建立一個新的instance，而是根據情況來決定要不要創建新的instance<br/>
    2.希望這個class 只能有一個instance（就是單例模式，singleton pattern ）<br/>
    3.不是要回傳這個class而是要回傳這個它的子class<br/>
</p>

<div>
    參考 : <a href="https://ithelp.ithome.com.tw/articles/10265921">https://ithelp.ithome.com.tw/articles/10265921</a>
</div>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        seo.pageTitle = "Dart 建構式";
        seo.metaTitle = "Dart 建構式";
        seo.metaDescription = @"Dart 建構式 : Dart 是一個支援 OOP 的程式語言，其建構式也跟大部分物件導向程式大致相同。
            在 Dart class constructor 中有提供一個語法糖 factory，
            和一般constructor最直觀的差異就是 factory constructor 會回傳一個 instance ，
            而不是像一般的 constructor 只要傳入值或者對this操作來設定值且不用另外撰寫return相關的語法
            。也因為是直接回傳 instance 所以就無法在 factory constructor 內對 this 進行操作";

        await base.SetParametersAsync(ParameterView.Empty);
    }
}
